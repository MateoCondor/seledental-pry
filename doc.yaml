openapi: 3.0.4
info:
  title: API SeléDental
  version: "1.0.0"
  description: API REST para la gestión de usuarios, autenticación y citas en SeléDental.
servers:
  - url: http://localhost:5000/api

tags:
  - name: Autenticación
  - name: Usuarios
  - name: Citas

paths:
  /auth/login:
    post:
      tags: [Autenticación]
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /auth/registro-cliente:
    post:
      tags: [Autenticación]
      summary: Registro público de cliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nombre, apellido, email, password, confirmarPassword]
              properties:
                nombre: { type: string }
                apellido: { type: string }
                email: { type: string }
                password: { type: string }
                confirmarPassword: { type: string }
      responses:
        '201':
          description: Cliente registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/perfil:
    get:
      tags: [Autenticación]
      summary: Obtener perfil autenticado
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /usuarios:
    get:
      tags: [Usuarios]
      summary: Listar usuarios
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  mensaje: { type: string }
                  datos:
                    type: object
                    properties:
                      usuarios:
                        type: array
                        items:
                          $ref: '#/components/schemas/Usuario'
        '403':
          $ref: '#/components/responses/Forbidden'
    post:
      tags: [Usuarios]
      summary: Crear usuario
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '201':
          description: Usuario creado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /usuarios/{id}:
    get:
      tags: [Usuarios]
      summary: Obtener usuario por ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Usuario obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Usuarios]
      summary: Actualizar usuario
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '200':
          description: Usuario actualizado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Usuarios]
      summary: Eliminar usuario (desactivación lógica)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Usuario eliminado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  mensaje: { type: string }
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /citas/categorias:
    get:
      tags: [Citas]
      summary: Listar categorías de consulta
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Categorías obtenidas correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  mensaje: { type: string }
                  datos:
                    type: object
                    properties:
                      categorias:
                        type: object
                        additionalProperties:
                          type: array
                          items:
                            type: object
                            properties:
                              value: { type: string }
                              label: { type: string }

  /citas/horarios-disponibles:
    get:
      tags: [Citas]
      summary: Horarios disponibles para una fecha
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: fecha
          required: true
          schema: { type: string, format: date }
      responses:
        '200':
          description: Horarios disponibles obtenidos correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  mensaje: { type: string }
                  datos:
                    type: object
                    properties:
                      fecha: { type: string, format: date }
                      horariosDisponibles:
                        type: array
                        items: { type: string }

  /citas:
    post:
      tags: [Citas]
      summary: Crear cita
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tipoConsulta, categoria, fechaHora]
              properties:
                tipoConsulta: { type: string }
                categoria: { type: string }
                fechaHora: { type: string, format: date-time }
                detalles: { type: string }
      responses:
        '201':
          description: Cita agendada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CitaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  /citas/mis-citas:
    get:
      tags: [Citas]
      summary: Listar citas del cliente autenticado
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: estado
          schema: { type: string }
      responses:
        '200':
          description: Citas obtenidas correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
                  mensaje: { type: string }
                  datos:
                    type: object
                    properties:
                      citas:
                        type: array
                        items:
                          $ref: '#/components/schemas/Cita'
                      totalCitas: { type: integer }
                      paginaActual: { type: integer }
                      totalPaginas: { type: integer }

  /citas/{id}/cancelar:
    put:
      tags: [Citas]
      summary: Cancelar cita
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                motivoCancelacion: { type: string }
      responses:
        '200':
          description: Cita cancelada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CitaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /citas/{id}/reagendar:
    put:
      tags: [Citas]
      summary: Reagendar cita
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fechaHora]
              properties:
                fechaHora: { type: string, format: date-time }
                motivoReagendamiento: { type: string }
      responses:
        '200':
          description: Cita reagendada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CitaResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Usuario:
      type: object
      properties:
        id: { type: integer }
        nombre: { type: string }
        apellido: { type: string }
        email: { type: string }
        rol: { type: string }
        activo: { type: boolean }
        cedula: { type: string }
        fechaNacimiento: { type: string, format: date }
        celular: { type: string }
        direccion: { type: string }
        perfilCompleto: { type: boolean }

    UsuarioInput:
      type: object
      required: [nombre, apellido, email, password, rol]
      properties:
        nombre: { type: string }
        apellido: { type: string }
        email: { type: string }
        password: { type: string }
        rol: { type: string }
        cedula: { type: string }
        fechaNacimiento: { type: string, format: date }
        celular: { type: string }
        direccion: { type: string }

    UsuarioResponse:
      type: object
      properties:
        success: { type: boolean }
        mensaje: { type: string }
        datos:
          type: object
          properties:
            usuario:
              $ref: '#/components/schemas/Usuario'

    AuthResponse:
      type: object
      properties:
        success: { type: boolean }
        mensaje: { type: string }
        datos:
          type: object
          properties:
            usuario:
              $ref: '#/components/schemas/Usuario'
            token:
              type: string

    Cita:
      type: object
      properties:
        id: { type: integer }
        clienteId: { type: integer }
        odontologoId: { type: integer }
        tipoConsulta: { type: string }
        categoria: { type: string }
        fechaHora: { type: string, format: date-time }
        duracion: { type: integer }
        detalles: { type: string }
        estado: { type: string }
        motivoCancelacion: { type: string }
        motivoReagendamiento: { type: string }
        fechaAnterior: { type: string, format: date-time }
        fechaReagendamiento: { type: string, format: date-time }
        observaciones: { type: string }
        fechaAsignacion: { type: string, format: date-time }
        notasOdontologo: { type: string }

    CitaResponse:
      type: object
      properties:
        success: { type: boolean }
        mensaje: { type: string }
        datos:
          type: object
          properties:
            cita:
              $ref: '#/components/schemas/Cita'

  responses:
    BadRequest:
      description: Solicitud incorrecta
      content:
        application/json:
          schema:
            type: object
            properties:
              success: { type: boolean, example: false }
              mensaje: { type: string }
              errores:
                type: array
                items:
                  type: object
                  properties:
                    campo: { type: string }
                    mensaje: { type: string }
    Unauthorized:
      description: No autorizado
      content:
        application/json:
          schema:
            type: object
            properties:
              success: { type: boolean, example: false }
              mensaje: { type: string }
    Forbidden:
      description: Prohibido
      content:
        application/json:
          schema:
            type: object
            properties:
              success: { type: boolean, example: false }
              mensaje: { type: string }
    NotFound:
      description: No encontrado
      content:
        application/json:
          schema:
            type: object
            properties:
              success: { type: boolean, example: false }
              mensaje: { type: string }